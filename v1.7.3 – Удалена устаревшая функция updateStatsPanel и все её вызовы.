/**
 * –°–∫—Ä–∏–ø—Ç: checkUrls_v1_4
 * –í–µ—Ç–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏: https://chatgpt.com/c/67f3d21f-3304-8010-8815-c559f6f3a1a6
 * 
 * v1.7.3 ‚Äì –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateStatsPanel –∏ –≤—Å–µ –µ—ë –≤—ã–∑–æ–≤—ã.
 * –ß–∏—Å—Ç—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–≤—Ç–æ–ø–∏–ª–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫.
 */

function checkUrls_v1_4() {
  const sheetName = "404 (–Ω–µ –º–µ–Ω—è—Ç—å!)";
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const props = PropertiesService.getScriptProperties();
  const runType = props.getProperty("nextRunType");

  if (runType === "oncePerDay") {
    sheet.getRange("A1").setValue(7);
    sheet.getRange("B1").setValue("");
    props.deleteProperty("nextRunType");
    createTriggerEvery5Minutes(); // üî• –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å —Ü–∏–∫–ª —Å—Ä–∞–∑—É —Å—Ç–∞—Ä—Ç—É–µ—Ç
    Logger.log("–ú–µ—Ç–∫–∞ oncePerDay –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –°–±—Ä–æ—Å B1/A1. –ù–æ–≤—ã–π —Ü–∏–∫–ª –Ω–∞—á–∞—Ç + —Å—Ç–∞—Ä—Ç 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞.");
  }

  const statusCell = sheet.getRange("B1").getValue();
  if (statusCell === "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞") {
    removeTrigger("checkUrls_v1_4");
    createTriggerOncePerDay();
    Logger.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞–≤–∏–º —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ –∑–∞–≤—Ç—Ä–∞.");
    return;
  }

  const startRow = parseInt(sheet.getRange("A1").getValue()) || 7;
  const urls = sheet.getRange(`B${startRow}:B`).getValues().flat();
  const maxChecks = 30;
  let checked = 0;
  let rowIndexes = [];

  for (let i = 0; i < urls.length && checked < maxChecks; i++) {
    const url = urls[i];
    if (!url) continue;
    const row = startRow + i;
    rowIndexes.push(row);

    let code = "", status = "", color = null;

    try {
      const response = UrlFetchApp.fetch(url, {
        muteHttpExceptions: true,
        followRedirects: true,
        timeout: 10
      });

      code = response.getResponseCode();

      if (code === 200) {
        status = "OK";
        color = "#d9ead3";
      } else if (code === 404) {
        status = "Not found";
        color = "#f4cccc";
      } else {
        status = `Code: ${code}`;
        color = "#fff2cc";
      }
    } catch (e) {
      code = "timeout";
      status = "–Ω–µ —É—Å–ø–µ–ª–∏";
      color = "#fce5cd";
    }

    sheet.getRange(`D${row}`).setValue(code);
    sheet.getRange(`E${row}`).setValue(
      Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "HH:mm:ss/dd, MM, yyyy")
    );
    sheet.getRange(`D${row}`).setBackground(color).setNote(status);

    checked++;
  }

  if (checked === 0) {
    sheet.getRange("A1").setValue(7);
    sheet.getRange("B1").setValue("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    removeTrigger("checkUrls_v1_4");
    createTriggerOncePerDay();
    Logger.log("–í—Å–µ —Å—Å—ã–ª–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏.");
    return;
  }

  const lastRowChecked = rowIndexes[rowIndexes.length - 1];
  sheet.getRange("A1").setValue(lastRowChecked + 1);

  const triggers = ScriptApp.getProjectTriggers();
  const has5MinTrigger = triggers.some(t => t.getHandlerFunction() === "checkUrls_v1_4" && t.getEventType() === ScriptApp.EventType.CLOCK);

  if (!has5MinTrigger) {
    createTriggerEvery5Minutes();
    Logger.log("–í–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏.");
  }
}

function removeTrigger(functionName) {
  const triggers = ScriptApp.getProjectTriggers();
  for (const trigger of triggers) {
    if (trigger.getHandlerFunction() === functionName) {
      ScriptApp.deleteTrigger(trigger);
    }
  }
}

function createTriggerEvery5Minutes() {
  ScriptApp.newTrigger("checkUrls_v1_4")
    .timeBased()
    .everyMinutes(5)
    .create();
}

function createTriggerOncePerDay() {
  PropertiesService.getScriptProperties().setProperty("nextRunType", "oncePerDay");
  ScriptApp.newTrigger("checkUrls_v1_4")
    .timeBased()
    .at(new Date(Date.now() + 24 * 60 * 60 * 1000))
    .create();
}

/**
 * üìÑ –õ–æ–≥ –≤–µ—Ä—Å–∏–π (07.04.2025)
 * | –í–µ—Ä—Å–∏—è | –î–∞—Ç–∞       | –ß—Ç–æ –Ω–æ–≤–æ–≥–æ                                                                 | –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ                                  |
 * |---------|------------|----------------------------------------------------------------------------------|-----------------------------------------------|
 * | v1.7.3  | 07.04.2025 | –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è updateStatsPanel + –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ—Ç–∫—É ChatGPT | –ß–∏—â–µ, –Ω–∞–¥—ë–∂–Ω–µ–µ, –ø—Ä–æ–∑—Ä–∞—á–Ω–µ–µ          |
 */
